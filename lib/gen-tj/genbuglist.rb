#
# named_query2tji.rb
#
# Convert list of bugs (generated by named query) to TJ include
#
# Usage:
#   named_query2tji <name-of-query>
#

require 'rubygems'
require 'dm-bugzilla-adapter'

# extend DataMapper Bug
class Bug
  def to_tj
    a = @assigned_to.split('@').first.gsub(".","_")
    s = @summary.gsub("\"","\\\"")
    s = "task bug_#{@id} \"#{s}\" {\n"
    s << "  allocate #{a}\n"
    s << "  effort 2d\n"
    s << "}\n"
    s
  end
end

module GenTJ
  class GenBuglist
    def GenBuglist.run query
      DataMapper::Logger.new(STDOUT, :debug)
      keeper = DataMapper.setup(:default, :adapter => 'bugzilla',
				:url  => 'https://bugzilla.novell.com')
      require 'bugzilla/named_query'
      DataMapper.finalize

      f = NamedQuery.get(query)

      bugs = f.bugs

      # sort bugs according to priority

      prios = []

      bugs.each do |bug|
	pval = 0 # use index 0 for unprioritized
	if bug.priority =~ /P([\d]+).*/
	  pval = $1.to_i + 1
	end
	prios[pval] ||= []
	prios[pval] << bug
      end

      puts "task bugs \"Bugs\" {"
      prio = 900
      # iterate over prios array, start with 1 (p1 bugs), end with 0 (unprioritized)
      ((1..(prios.size-1)).to_a << 0).each do |i|
	bugs = prios[i]
	next if bugs.nil? || bugs.empty?
	puts "task p#{(i==0)?'none':i}_bugs \"Bugs with prio #{bugs.first.priority}\" {"
	puts "priority #{prio}"
	bugs.each do |bug|
	  puts bug.to_tj
	end
	puts "}"
	prio -= 100
      end
      puts "}"
    end
  end
end
